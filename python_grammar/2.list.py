#파이선의 리스트는 C언어의 배열
#파이선의 리스트는 여러개의 데이터를 연속적으로 담아 처리하기 위해 사용하는 자료형
#[,] 
#list()
#[]
#리스트의 원소에 접근할 때는 인덱스값을 괄호에 넣는다.

#직접 데이터를 넣어 초기화
a = [1,2,3,4,5,6,7,8,9]
print(a) #[1,2,3,4,5,6,7,8,9]

#네번째 원소만 출력
print(a[3]) #4

#크기가 N이고, 모든 값이 0인 1차원 리스트 초기화
n=10
a=[0]*n
print(a) #[0,0,0,0,0,0,0,0,0,0]

#리스트 인덱싱
a = [1,2,3,4,5,6,7,8,9]
#여덟 번째 원소만
print(a[7])
#뒤에서 첫 번째 원소만
print(a[-1]) #9
#뒤에서 세 번째 원소
print(a[-3])
#네번째 원소 값 변경
a[3] = 7
print(a)

#리스트 슬라이싱 by 콜론 (:)
#끝 인덱스는 실제 인덱스보다 1을 더 크게 설정한다 ★★★★★★★★★★★★★★★★★★★★★★
a = [1,2,3,4,5,6,7,8,9]
#두 번째 원소부터 네 번째 원소
print(a[1:4]) #아 ~ a[1] ~ a[3]까지구나

#리스트 컴프리헨션 ★★★★★★★★★★★★★★★★★★★★★★
#리스트 초기화 하는 방법 중 1 -> 대활호 안에 반복문사용 ★★★★★★★★★★★★★★★★★★★★★★
#대괄호안에 조건문과 반복문을 적용하여 리스트를 초기화
#0 ~ 9까지의 수를 포함하는 리스트
array = [i for i in range(10)] #대활호 안에 반복문사용
print(array) #[0,1,2,3,4,5,6,7,8,9]

#0~19까지의 수 중에서 홀수만 포함하는 리스트
a = [i for i in range(20) if i & 2 == 1]

#1~9까지의 수들의 제곱값을 포함하는 리스트
a = [i*i for i in range(1,10)]

#리스트 컴프리헨션 vs 일반적인 코드
#1.리스트 컴프리헨션
array = [i for i in range(10)] #대활호 안에 반복문사용
print(array)

#2.일반적인 코드
array = []
for i in range(20):
    if i & 2 == 1:
        array.append(i)
print(array)

#리스트 컴프리헨션은 2차원 리스트를 초기화할 때 효과적으로 사용될 수 있다.
#★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★
#특히 N * M 크기의 2차원 리스트를 한 번에 초기화 할 때 매우 유용.
array = [[0] * m for _ in range(n)] #반복될 때마다 리스트를 원소로 설정
#나쁜 예시
array = [[0] * m] * n
#위 코드는 전체 리스트 안에 포함된 각 리스트가 모두 같은 객체로 인식된다.

#파이선에서는 반복을 수행하되 반복을 위한 변수의 값을 무시하고자 할 때 언더바(_)를 자주 사용한다.
#★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★
#1~9까지 자연수 더하기
sum = 0
for i in range(1,10): 
    sum += i #매 반복문 마다 1,2,3,4,5,6,7,8,9를 이용함 
print(sum)

#"hello world" 5번 출력
for _ in range(5): #단순히 5번 반복
    print("hello world")

#리스트 관련 기타 메서드
a = [1,4,3]
#리스트에 원소 삽입
a.append(2) #[1,4,3,2]
#오름차순 정렬
a.sort() #[1,2,3,4]
#내림차순 정렬
a.sort(reverse=True) #[4,3,2,1]
#원소 뒤집기
a.reverse() #[1,2,3,4]
#특정 인덱스에 데이터 추가
a.insert(2,3) #[1,2,3,3,4]
#특정 값인 데이터 개수 세기
print("값이 3인 데이터 개수: ",a.count(3))
#특정 값 데이터 삭제
a.remove(1)

#리스트에서 특정 값을 가지는 원소를 모두 제거하기
a = [1,2,3,4,5,5,5]
remove_set = {3,5} #집합자료형
#remove_list에 포함되지 않은 값만을 저장
result = [i for i in a if i not in remove_set]
print(result) #[1,2,4]