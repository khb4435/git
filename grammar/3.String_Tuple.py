#문자열 변수 초기화시, "" 나 '' 사용한다.
#전체 문자열을 큰 따옴표로 구성하는 경우 내부적으로 작은 따옴표 포함 가능
#전체 문자열을 작은 따옴표로 구성하는 경우 내부적으로 큰 따옴표 문자 가능
#혹은 백슬래시\ 이용하면, 큰 따옴표나 작은따옴표를 원하는 만큼 포함시킬 수 있다.

data = 'Hello World'
print(data)

data = "Don't you know \"Python\"?"
print(data)

#문자열 변수에 덧셈+을 이용하면 문자열이 더해져서 연결된다.
#문자열 변수를 특정한 양의 정수와 곱하는 경우, 문자열이 그 값만큼 여러번 더해진다.
#문자열에 대해서도 마찬가지로 인덱싱과 슬라이싱을 이용할 수 있다. -> 문자열 조회는 가능★★★★★★★★★★★★★★★★★★★★★★★★★★
#다만 문자열은 특정 인덱스의 값을 변경할 수는 없다. #c언어의 const char인가???! -> 문자열 수정은 불가능★★★★★★★★★★★★★★★★★★★★★★★★★★
a = "hello"
b = "world"
print(a + " " + b)

a = "string"
print(a*3)

a="ABCDE"
print(a[2:4]) #a[2]~a[3] : CD

#튜플자료형
#리스트와 유사하지만 
#튜플은 read only라 변경될 수 없음 (문자열과 마찬가지)
#리스트는 [] , 튜플은 ()
#튜플은 기능이 제한적이라 상대적으로 공간 효율적이다.
a = (1,2,3,4,5,6,7,8,9)
print(a[3])
print(a[1:4]) #튜플 조회는 가능★★★★★★★★★★★★★★★★★★★★★★★★★★
#a[2] = 7 불가 (튜플은 리스트와 달리 값 바꾸기 불가)★★★★★★★★★★★★★★★★★★★★★★★★★★

#튜플은 언제 ?
#서로 다른 성질의 데이터를 묶어서 관리해야 할 때.
#최단 경로 알고리즘에서는 (비용,노드번호)의 형태로 튜플 이용
#데이터의 나열을 해싱의 키 값으로 사용해야 할 때
#튜플은 변경이 불가능함으로 리스트와 다르게 키 값으로 사용
#리스트보다 메모리를 효율적으로 사용해야 할 때